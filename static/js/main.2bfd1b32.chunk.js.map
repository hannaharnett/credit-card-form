{"version":3,"sources":["CreditCard.js","Input.js","Button.js","FormErrors.js","FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["cards","name","src","props","className","isFlipped","number","test","alt","ccName","exp","arr","i","length","push","substr","join","addSlashToDate","cvc","Input","for","title","type","value","onChange","onFocus","minLength","maxLength","Button","disabled","FormErrors","formErrors","Object","keys","map","fieldName","key","CreditCardForm","handleUserInput","event","target","setState","validateField","state","ccNameValid","numberValid","expValid","cvcValid","formValid","bind","handleClickFlip","handleClickUnFlip","validateForm","fieldValidationErrors","this","match","placeholder","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bfd1b32.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./credit-card.css\";\n\nconst cards = [\n  {\n    name: \"blank\",\n    src:\n      \"https://upload.wikimedia.org/wikipedia/commons/d/df/Map-circle-grey.svg\"\n  },\n  {\n    name: \"mastercard\",\n    src:\n      \"https://upload.wikimedia.org/wikipedia/commons/0/04/Mastercard-logo.png\"\n  },\n  {\n    name: \"visa\",\n    src:\n      \"https://upload.wikimedia.org/wikipedia/commons/5/53/Visa_2014_logo_detail.svg\"\n  },\n  {\n    name: \"dinersclub\",\n    src:\n      \"https://upload.wikimedia.org/wikipedia/commons/a/a6/Diners_Club_Logo3.svg\"\n  },\n  {\n    name: \"americanExpress\",\n    src:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/American_Express_logo.svg/600px-American_Express_logo.svg.png\"\n  }\n];\n\nconst changeLogo = number => {\n  let src;\n  // Sets logo by checking first digits\n  // Mastercard\n  if (/^(5[0-6])/.test(number)) {\n    src = cards[1].src;\n    // Visa\n  } else if (/^4/.test(number)) {\n    src = cards[2].src;\n    // Dinersclub\n  } else if (/^(3[689])/.test(number)) {\n    src = cards[3].src;\n    // American Express\n  } else if (/^(3[47])/.test(number)) {\n    src = cards[4].src;\n    // Blank logo\n  } else {\n    src = cards[0].src;\n  }\n  return src;\n};\n\nconst addSlashToDate = exp => {\n  var split = 2;\n  var arr = [];\n\n  for (var i = 0; i < exp.length; i += split) {\n    arr.push(exp.substr(i, split));\n  }\n\n  return arr.join(\"/\");\n};\n\nexport default props => {\n  return (\n    <div className=\"card-container\">\n      <div className={\"card \" + (props.isFlipped ? \"is-flipped\" : \"\")}>\n        <div className=\"card-face-front card-face\">\n          <div className=\"card-logo\">\n            <img src={changeLogo(props.number)} alt=\"logo\" />\n          </div>\n          <div className=\"card-number\">{props.number}</div>\n          <div className=\"card-info\">\n            <div className=\"card-info-name\">\n              <div>{props.ccName ? props.ccName : \"Name on card\"}</div>\n            </div>\n            <div className=\"card-info-expiry\">\n              <div>{props.exp ? addSlashToDate(props.exp) : \"valid thru\"}</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-face-back card-face\">\n          <div className=\"back-stripe\"></div>\n          <div className=\"security-code-stripe\">\n            <div className=\"security-code\">{props.cvc}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./input.css\";\n\nconst Input = props => {\n  return (\n    <div className=\"input-container\">\n      <label for={props.name} className=\"form-label\">\n        {props.title}\n      </label>\n      <input\n        type={props.type}\n        name={props.name}\n        value={props.value}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        minLength={props.minLength}\n        maxLength={props.maxLength}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport \"./button.css\";\n\nconst Button = props => {\n  return (\n    <button className=\"form-button\" disabled={props.disabled}>\n      {props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./form-errors.css\";\n\nconst FormErrors = ({ formErrors }) => {\n  return (\n    <div>\n      {Object.keys(formErrors).map((fieldName, i) => {\n        if (formErrors[fieldName].length > 0) {\n          return <p key={i}>{formErrors[fieldName]}</p>;\n        } else {\n          return \"\";\n        }\n      })}\n    </div>\n  );\n};\n\nexport default FormErrors;\n","import React, { Component } from \"react\";\nimport VirtualCreditCard from \"./CreditCard\";\nimport Input from \"./Input\";\nimport Button from \"./Button\";\nimport FormErrors from \"./FormErrors\";\nimport \"./form-container.css\";\n\nexport default class CreditCardForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ccName: \"\",\n      number: \"\",\n      exp: \"\",\n      cvc: \"\",\n      formErrors: { ccName: \"\", number: \"\", exp: \"\", cvc: \"\" },\n      ccNameValid: false,\n      numberValid: false,\n      expValid: false,\n      cvcValid: false,\n      formValid: false,\n      isFlipped: false\n    };\n    this.handleUserInput = this.handleUserInput.bind(this);\n    this.handleClickFlip = this.handleClickFlip.bind(this);\n    this.handleClickUnFlip = this.handleClickUnFlip.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n  handleUserInput = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value }, () => this.validateField(name, value));\n  };\n  // Validate each input and updates error object in state\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let { ccNameValid, numberValid, expValid, cvcValid } = this.state;\n    switch (fieldName) {\n      case \"ccName\":\n        ccNameValid = value.match(/^[a-zA-z]+$/);\n        fieldValidationErrors.ccName = ccNameValid ? \"\" : \"Please enter name\";\n        break;\n      case \"number\":\n        numberValid = value.match(/^[0-9]{16}/);\n        fieldValidationErrors.number = numberValid\n          ? \"\"\n          : \"Please enter card number\";\n        break;\n      case \"exp\":\n        expValid = value.match(/^[0-9]{4}/);\n        fieldValidationErrors.exp = expValid ? \"\" : \"Date is invalid\";\n        break;\n      case \"cvc\":\n        cvcValid = value.match(/^[0-9]{3}/);\n        fieldValidationErrors.cvc = cvcValid ? \"\" : \"Security code is invalid\";\n        break;\n      default:\n        break;\n    }\n    this.setState(\n      {\n        formErrors: fieldValidationErrors,\n        ccNameValid: ccNameValid,\n        numberValid: numberValid,\n        expValid: expValid,\n        cvcValid: cvcValid\n      },\n      this.validateForm\n    );\n  }\n  // When every input is valid, whole form is valid\n  validateForm() {\n    let { ccNameValid, numberValid, expValid, cvcValid } = this.state;\n    this.setState({\n      formValid: ccNameValid && numberValid && expValid && cvcValid\n    });\n  }\n  // Flips card to show CVC on back when CVC input is in focus/clicked\n  handleClickFlip() {\n    this.setState({ isFlipped: true });\n  }\n  // Flips back to front side when NAME, NUMBER & EXP is in focus/clicked\n  handleClickUnFlip() {\n    this.setState({ isFlipped: false });\n  }\n  render() {\n    const { ccName, number, exp, cvc, formErrors, isFlipped } = this.state;\n    return (\n      <div>\n        <div className=\"container\">\n          <VirtualCreditCard\n            ccName={ccName}\n            number={number}\n            exp={exp}\n            cvc={cvc}\n            isFlipped={isFlipped}\n          />\n          <div className=\"form-container\">\n            <FormErrors formErrors={formErrors} />\n            <form>\n              <div className=\"form-group\">\n                {/* Credit Card Number */}\n                <Input\n                  type=\"text\"\n                  name=\"number\"\n                  title=\"Card Number\"\n                  value={number}\n                  onChange={this.handleUserInput}\n                  onFocus={this.handleClickUnFlip}\n                  maxLength=\"16\"\n                />\n                {/* Cardholder's Name */}\n                <Input\n                  type=\"text\"\n                  name=\"ccName\"\n                  title=\"Name on card\"\n                  value={ccName}\n                  onChange={this.handleUserInput}\n                  onFocus={this.handleClickUnFlip}\n                />\n              </div>\n              <div className=\"form-group\">\n                {/* Expiration date */}\n                <Input\n                  type=\"text\"\n                  name=\"exp\"\n                  title=\"Expiration date\"\n                  value={exp}\n                  placeholder=\"MM / YY\"\n                  onChange={this.handleUserInput}\n                  onFocus={this.handleClickUnFlip}\n                  maxLength=\"4\"\n                />\n                {/* Security code */}\n                <Input\n                  type=\"text\"\n                  name=\"cvc\"\n                  title=\"Security code\"\n                  value={cvc}\n                  onChange={this.handleUserInput}\n                  onFocus={this.handleClickFlip}\n                  maxLength=\"3\"\n                />\n              </div>\n              <Button title=\"Submit\" disabled={!this.state.formValid} />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport FormContainer from \"./FormContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}